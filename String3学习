心得:今天写题还算可以,根据思路能写出来了,有进步,今天学了七个小时,继续加油,String的代码题
package String;

import java.util.Scanner;

public class test1 {
    public static void main(String[] args) {
        //1.转换罗马数字

        //将内容变成罗马数字
        //下面是阿拉伯数字跟罗马数字的对比关系:
        //Ⅰ-1、Ⅱ-2、Ⅲ-3、Ⅳ-4、Ⅴ-5、Ⅵ-6、Ⅶ-7、Ⅷ-8、Ⅸ-9注意点:
        //罗马数字里面是没有0的 如果键盘录入的数字包含0，可以变成" "(长度为0的字符串)

        //键盘录入一个字符串
        //要求1:长度为小于等于9
        //要求2:只能是数字

        Scanner sc = new Scanner(System.in);
        System.out.println("请输入一个字符串");
        String number = sc.next();
        int len = number.length();
        String s ="";

        for (int i = 0; i < number.length();i++ ) {
            char c = number.charAt(i);
            if(len <= 9 && c >= '1' && c<= '9'){
         //将char类型转换成int类型
                int num = c - 48;
                s = s + numberConvert(num);
            }
        }

           System.out.println("输入错误");

        for (int i = 0; i < s.length(); i++) {
            System.out.print(s.charAt(i) + " ");
        }

    }
        //定义一个方法  数字转成罗马数字
    public static String numberConvert(int number){

        String[] arr = {"Ⅰ","Ⅱ","Ⅲ","Ⅳ","Ⅴ","Ⅵ","Ⅶ","Ⅷ","Ⅸ"};
       return arr[number-1];
    }






}
package String;

import java.util.Scanner;

public class test1_2 {
    public static void main(String[] args) {
        //键盘录入一个字符串

        Scanner sc = new Scanner(System.in);
        System.out.println("请输入一个字符串");
        String AlaBo;
        while (true) {

            AlaBo = sc.next();
            boolean flag = judge(AlaBo);
            if (flag) {
            break;
            } else {
                System.out.println("请重新输入");
                continue;
            }
        }
        //将内容变成罗马数字
        //下面是阿拉伯数字跟罗马数字的对比关系:
        //Ⅰ-1、Ⅱ-2、Ⅲ-3、Ⅳ-4、Ⅴ-5、Ⅵ-6、Ⅶ-7、Ⅷ-8、Ⅸ-9注意点:
        //罗马数字里面是没有0的 如果键盘录入的数字包含0，可以变成" "(长度为0的字符串)


        //字符串拼接
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < AlaBo.length(); i++) {
            char c = AlaBo.charAt(i);
            //将字符c转成int类型  ASCII码
//            int number = c - 48;
//            String s = changeLuoMa(number);

            String s = changeLuoMa(c);
            sb.append(s).toString();//添加数据

        }System.out.println(sb);


    }
    //查表法
//    public static String changeLuoMa(int number){
////为了将索引1对应Ⅰ,索引0 为空字符
//        String[] arr ={"","Ⅰ","Ⅱ","Ⅲ","Ⅳ","Ⅴ","Ⅵ","Ⅶ","Ⅷ","Ⅸ"};
//        return arr[number];
//    }

//switch case法
    public static String changeLuoMa(char number){

    String s = switch (number){
        case '0' -> "";
         case '1' -> "Ⅰ";
        case '2' -> "Ⅱ";
        case '3' -> "Ⅲ";
        case '4' -> "Ⅳ";
        case '5' -> "Ⅴ";
        case '6' -> "Ⅵ";
        case '7' -> "Ⅶ";
        case '8' -> "Ⅷ";
        case '9' -> "Ⅸ";
        default ->"";
    };
    return s;
    }




    //定义一个方法
    //要求1:长度为小于等于9
    //要求2:只能是数字
    public static boolean judge(String s){
        if(s.length()>9){
            return false;
        }
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if(c<'0' || c>'9'){
                return false;
            }
        }
        return true;

    }
}
package String;

public class test2 {
    public static void main(String[] args) {
        //给定两个字符串，A 和 B。
        //A 的旋转操作就是将 A最左边的字符移动到最右边例如,若A='abcde'，
        // 在移动一次之后结果就是'bcdea'
        // 如果在若干次调整操作之后，A能变成B，那么返回True
        // 如果不能匹配成功，则返回false


        ////给定两个字符串，A 和 B。
        String A = "abc";
        String B = "bca";

        //判断是否相等
        boolean judge = judge(A, B);
        System.out.println(judge);


    }
    //干什么  判断是否相等
    //需要什么   旋转后字符串   B字符串
    //返回值 布尔

    public static boolean judge(String s, String B) {
        //循环三次,整好长度也为3
        //abc

        //bca
        //cab
        //abc
        for (int i = 0; i < s.length(); i++) {
            s = rotate(s);//每次循环完,rotate(s)返回一个新字符串,变量s指向这个新字符串
            if (s.equals(B)) {
                return true;
            }
        }
        return false;

    }


    //定义方法
    //干什么 旋转字符串  最左边的字符放到右边
    //需要什么  旋转前的字符串
    //返回值  旋转后的字符串
    public static String rotate(String str) {
        //先把左边取出来,再拼接,最后截取新的字符串
        char c = str.charAt(0);
        str = str + c;
        String newStr = str.substring(1, 4);
        return newStr;
    }
}
 package String;

public class test2_2 {
    public static void main(String[] args) {
        //给定两个字符串，A 和 B。
        //A 的旋转操作就是将 A最左边的字符移动到最右边例如,若A='abcde'，
        // 在移动一次之后结果就是'bcdea'
        // 如果在若干次调整操作之后，A能变成B，那么返回True
        // 如果不能匹配成功，则返回false


        ////给定两个字符串，A 和 B。
        String A = "abc";
        String B = "bca";

        //判断是否相等
        boolean judge = judge(A, B);
        System.out.println(judge);


    }
    //干什么  判断是否相等
    //需要什么   旋转后字符串   B字符串
    //返回值 布尔

    public static boolean judge(String s, String B) {
        //循环三次,整好长度也为3
        //abc

        //bca
        //cab
        //abc
        for (int i = 0; i < s.length(); i++) {
            s = rotate(s);//每次循环完,rotate(s)返回一个新字符串,变量s指向这个新字符串
            if (s.equals(B)) {
                return true;
            }
        }
        return false;

    }


    //定义方法
    //干什么 旋转字符串  最左边的字符放到右边
    //需要什么  旋转前的字符串
    //返回值  旋转后的字符串
    public static String rotate(String str) {

        char[] chars = str.toCharArray();
        //先取出0索引
        char first = chars[0];
        //每个索引对应的值,放到前一个索引上
        for (int i = 1; i < chars.length; i++) {
            chars[i-1] = chars[i];
        }
        //把0索引对应的值放到最后索引上
        chars[chars.length-1] = first;
        //生成一个新字符串
        String s = new String(chars);
        return s;
    }
}
package String;

import java.util.Random;
import java.util.Scanner;

public class test3 {
    public static void main(String[] args) {
        //1.键盘输入任意字符串,打乱里面的内容
        System.out.println("请输入一个字符串");
        Scanner sc = new Scanner(System.in);
        String str = sc.next();

        char[] chars = str.toCharArray();
        Random random = new Random();

        char temp = ' ';
        for (int i = 0; i < chars.length; i++) {
            int index = random.nextInt(chars.length);
            temp = chars[i];
            chars[i] = chars[index];
            chars[index] = temp;

        }
       String s = new String(chars);
        System.out.println(s);


        //2.字符串可以是小写字母，也可以是大写字母，还可以是数字
        // 规则:
        //长度为5
        //内容中是四位字母，1位数字。
        //其中数字只有1位，但是可以出现在任意的位置
        char[] chars =new char[52];
     //26个小写字母 a,b,c...z  97
        //A    65
        for (int i = 0; i < chars.length; i++) {
            if(i<26){
                chars[i] = (char)(97 + i);
            }else{
                chars[i] = (char)(65 + i - 26);
            }
        }
        for (int i = 0; i < chars.length; i++) {
            System.out.print(chars[i] + " ");
        }
        System.out.println("");
        char[] newArr = new char[4];
        Random random = new Random();
        for (int i = 0; i < 4; i++) {
            int index = random.nextInt(chars.length);
            newArr[i] = chars[index];
        }
        for (int i = 0; i < newArr.length; i++) {
            System.out.print(newArr[i] + " ");
        }
        String s = new String(newArr);
        System.out.println(s);


        int Num = random.nextInt(10);
        char num =(char)(Num + 48) ;
        System.out.println(num);
        String newStr = newStr(num, s);
        System.out.println(newStr);

    }
    //干什么 打乱字符串
    //需要什么 字符 字符串
    //返回新的字符串
    public static String newStr(char c,String str){

        str = str + c;
        System.out.println(str);
        char[] chars = str.toCharArray();
        Random random =new Random();
        int index = random.nextInt(chars.length);
        char temp = ' ';
        for (int i = 0; i < chars.length; i++) {
            temp = chars[chars.length-1];
            chars[chars.length-1] = chars[index];
            chars[index] = temp;
        }
       return new String(chars);

    }
}
package String;

public class test4 {
    public static void main(String[] args) {

/*给定两个以字符串形式表示的非负整数num1和num2,返回num1和num2的乘积，
它们的乘积也表示为字符串形式。
 */
        //只有转成int类型,才能相乘

        //1.定义两个字符串
        String num1 = "13";
        String num2 = "10";

        //2.方法
        //将字符串放到字符数组中,再变成整型数组
        int[] arr1 = newArr(num1);
        int[] arr2 = newArr(num2);

        //3.方法
        // 将整型数组中每个元素 变成一个整数
        int newNum1 = newNum(arr1);
        int newNum2 = newNum(arr2);

        int res = newNum1 * newNum2;

        System.out.println(newNum1);
        System.out.println(newNum2);
        System.out.println(res);

        //将整数变成字符串

        String s = "";
        s = s + res;
        System.out.println(s);




    }
    //干什么 将字符串放到字符数组中,再变成整型数组
    //需要什么 字符串
    //返回值 int[]
    public static int[] newArr(String s){
        //将字符串放到字符数组中
        char[] chars = s.toCharArray();

        //arr的临时索引
        int index = 0;
        //整型数组arr
        // 想要把字符数组复制到整型数组中
        int[] arr = new int[chars.length];

        for (int i = 0; i < chars.length; i++) {
            //取出字符
            char c = chars[i];
            //把char类型 变成 int类型
            int n1 = c - 48;
            //将取出来的数字放到整型数组中
            arr[index] = n1;
            index ++;
        }

        return arr;
    }
    //干什么  将数组中每个元素 变成一个整数
    //需要什么  数组
    //返回值 int
    public static int newNum(int[] arr){
        int num1 = 0;
        for (int i = 0; i < arr.length; i++) {
            num1 = num1 * 10 + arr[i];
        }
        return num1;
    }
}
package String;

public class test5 {
    public static void main(String[] args) {
//        给你一个字符串 s，由若干单词组成，单词前后用一些空格字符隔开。
//        返回字符串中最后一个单词的长度。
//        单词是指仅由字母组成、不包含任何空格字符的最大子字符串。
//        示例 1:输入:s="Hello World"输出:5
//        解释:最后一个单词是“World”，长度为5。
//        示例 2:输入:s="fly me to the moon" 输出:4
//        解释:最后一个单词是“moon”，长度为4。

        String s ="fly me to the moon";
        //找到最后一个空格的索引值
        int index = 0;
        for (int i = 0; i < s.length(); i++) {
            if(s.charAt(i)==' '){
                index = i;
            }
        }
        System.out.println(index);
        //截取字符串
        String newStr = s.substring(index + 1);
        //求长度
        int length = newStr.length();

        System.out.println(length);
    }
}
