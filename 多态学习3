1.多态的优势:方法中,使用父类型作为参数,可以接收所有子类对象
2.弊端:不能使用子类的特有功能
3.引用数据类型的类型转换
 自动类型转换 ---> Person p = new Student() 
 强制类型转换 ---> Student s = (Student)p 由父类强制转换成子类
4.解决什么问题
 可以转换成真正的子类类型,从而调用子类独有功能
 转换类型与真实对象类型不一致会报错
 转换的时候用instanceof关键字进行判断
******************************************************************************************************************************************************************************************
   package a03;

public class Test {
    public static void main(String[] args) {
        Animal a = new Dog();
        //编译看左边,运行看右边
        a.eat();
        //弊端,不能调用子类特有的功能
        //解决方法:强制类型转换,父类变子类

//a 的右边是不是Dog类型 如果是就直接转换成Dog类型,变量改为d
        //如果不是,不强转,结果false
        if(a instanceof Dog d){
            d.lookHome();
        }
    }
}
-----------------------------------------------------------------------------------------
class Animal{
    public void eat(){
        System.out.println("动物吃东西");
    }
}
-----------------------------------------------------------------------------------------
class Dog extends Animal{
    public void eat(){
        System.out.println("狗吃骨头");
    }
    public void lookHome(){
        System.out.println("看家");
    }
}
-----------------------------------------------------------------------------------------
class Cat extends Animal {
    public void eat() {
        System.out.println("猫吃鱼");
    }
}



   
