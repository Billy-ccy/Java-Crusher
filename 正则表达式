package a06Regex;

public class RegexDemo1 {
    public static void main(String[] args) {
                //public boolean matches(String regex):判断是否与正则表达式匹配，匹配返回true
                // 只能是a b c
                System.out.println("-----------1-------------");
                System.out.println("a".matches("[abc]")); // true
                System.out.println("z".matches("[abc]")); // false
                // 不能出现a b c
                System.out.println("-----------2-------------");
                System.out.println("a".matches("[^abc]")); // false
                System.out.println("1".matches("[^abc]")); // true
                System.out.println("zz".matches("[^abc]")); //false
                System.out.println("zz".matches("[^abc][^abc]")); //true

        // a到zA到Z(包括头尾的范围)
                System.out.println("-----------3-------------");
                System.out.println("a".matches("[a-zA-z]")); // true
                System.out.println("z".matches("[a-zA-z]")); // true
                System.out.println("aa".matches("[a-zA-z]"));//false
                System.out.println("zz".matches("[a-zA-Z]")); //false
                System.out.println("zz".matches("[a-zA-Z][a-zA-Z]")); //true
                System.out.println("0".matches("[a-zA-Z]"));//false
                System.out.println("0".matches("[a-zA-Z0-9]"));//true


                // [a-d[m-p]] a到d，或m到p
                System.out.println("-----------4-------------");
                System.out.println("a".matches("[a-d[m-p]]"));//true
                System.out.println("d".matches("[a-d[m-p]]")); //true
                System.out.println("m".matches("[a-d[m-p]]")); //true
                System.out.println("p".matches("[a-d[m-p]]")); //true
                System.out.println("e".matches("[a-d[m-p]]")); //false
                System.out.println("0".matches("[a-d[m-p]]")); //false
        // [a-z&&[def]] a-z和def的交集。为:d，e，f
                System.out.println("----------5------------");
                System.out.println("a".matches("[a-z&[def]]")); //false
                System.out.println("d".matches("[a-z&&[def]]")); //true
                System.out.println("0".matches("[a-z&&[def]]")); //false

        // [a-z&&[^bc]] a-z和非bc的交集。(等同于[ad-z])
                System.out.println("-----------6------------_");
                System.out.println("a".matches("[a-z&&[^bc]]"));//true
                System.out.println("b".matches("[a-z&&[^bc]]")); //false
                System.out.println("0".matches("[a-z&&[^bc]]")); //false
        // [a-z&&[^m-p]] a到z和除了m到p的交集。(等同于[a-1q-z])
                System.out.println("-----------7-------------");
                System.out.println("a".matches("[a-z&&[^m-p]]")); //true
                System.out.println("m".matches("[a-z&&[^m-p]]")); //false
                System.out.println("0".matches("[a-z&&[^m-p]]")); //false

    }
        }
************************************************************************************************************************
\" 双引号转义
\\反斜杠 c:\\path -> c:\path 
\\. -> \.
package a06Regex;

public class RegexDemo2 {
    public static void main(String[] args) {
                // \ 转义字符 改变后面那个字符原本的含义
                //练习:以字符串的形式打印一个双引号
                //"在Java中表示字符串的开头或者结尾
                //此时\表示转义字符，改变了后面那个双引号原本的含义
                //把他变成了一个普普通通的双引号而已。
                System.out.println("\"");

                // \表示转义字符
                //两个\的理解方式：前面的\是一个转义字符，改变了后面\原本的含义，把他变成一个普普通通的\而已。
                System.out.println("c:Users\\moon\\IdeaProjects\\basic-code\\myapi\\src\\com\\itheima\\a08regexdemo\\RegexDemo1.java");


                //.表示任意一个字符
                System.out.println("你".matches("..")); //false
                System.out.println("你".matches(".")); //true
                System.out.println("你a".matches(".."));//true
        System.out.println("a".matches("."));
                // \\d 表示任意的一个数字
                // \\d只能是任意的一位数字
                // 简单来记:两个\表示一个\
                System.out.println("a".matches("\\d")); // false
                System.out.println("3".matches("\\d")); // true
                System.out.println("333".matches("\\d")); // false
        System.out.println("2".matches("\\d"));
        //\\w只能是一位单词字符[a-zA-Z_0-9]
                System.out.println("z".matches("\\w")); // true
                System.out.println("2".matches("\\w")); // true
                System.out.println("21".matches("\\w")); // false
                System.out.println("你".matches("\\w"));//false
        System.out.println("_".matches("\\w"));
        // 非单词字符
                System.out.println("你".matches("^\\W")); // true
                System.out.println("---------------------------------------------");
                // 以上正则匹配只能校验单个字符。


                // 必须是数字 字母 下划线 至少 6位
                System.out.println("2442fsfsf".matches("\\w{6,}"));//true
                System.out.println("244f".matches("\\w{6,}"));//false
        System.out.println("sdfsdfffds".matches("\\w{12,}"));//false

                // 必须是数字和字符 必须是4位
                System.out.println("23dF".matches("[a-zA-Z0-9]{4}"));//true
                System.out.println("23_F".matches("[a-zA-Z0-9]{4}"));//false
                System.out.println("23dF".matches("[\\w&&[^_]]{4}"));//true
                System.out.println("23_F".matches("[\\w&&[^_]]{4}"));//false
                System.out.println("我是崔晓阳".matches("[\\W]{5}"));
    }
        }

*******************************************************************************************************
手机号,座机号,邮箱号,时间正则表达式校验
package a06Regex;

public class RegexDemo3 {
    public static void main(String[] args) {
        /*
            需求
            请编写正则表达式验证用户输入的手机号码是否满足要求。请编写正则表达式验证用户输入的邮箱号是否满足要求。请编写正则表达式验证用户输入的电话号码是否满足要求。
            验证手机号码 13112345678 13712345667 13945679027 139456790271
            验证座机电话号码 020-2324242 02122442 027-42424 0712-3242434
            验证邮箱号码 3232323@qq.com zhangsan@itcast.cnn dlei0009@163.com dlei0009@pci.com.cn
        */

                //心得:
                //拿着一个正确的数据，从左到右依次去写。
                //13112345678
                //分成三部分:
                //第一部分:1 表示手机号码只能以1开头
                //第二部分:[3-9] 表示手机号码第二位只能是3-9之间的
                //第三部分:\\d{9} 表示任意数字可以出现9次，也只能出现9次
                String regex1 = "1[3-9]\\d{9}";
                System.out.println("13112345678".matches(regex1));//true
                System.out.println("13712345667".matches(regex1));//true
                System.out.println("13945679027".matches(regex1));//true
                System.out.println("139456790271".matches(regex1));//false
                System.out.println("-----------------------------------");

                //座机电话号码
                //020-2324242 02122442 027-42424 0712-3242434
                //思路:
                //在书写座机号正则的时候需要把正确的数据分为三部分
                //一:区号
                //     0 表示区号一定是以0开头的
                //   \\d{2,3}   :表示区号从第二位开始可以是任意的数字，可以出现2到3次。
                //二:_?表示次数，0次或一次
                //三:[1-9]\\d{4,9}号码 号码的第一位也不能以0开头，从第二位开始可以是任意的数字，号码的总长度:5-10位
                String regex2 = "0\\d{2,3}-?[1-9]\\d{4,9}";
                System.out.println("020-2324242".matches(regex2));
                System.out.println("02122442".matches(regex2));
                System.out.println("027-42424".matches(regex2));
                System.out.println("0712-3242434".matches(regex2));

                //邮箱号码
                //3232323@qq.com zhangsan@itcast.cnn dlei0009@163.com dlei0009@pci.com.cn
                //思路:
                //在书写邮箱号码正则的时候需要把正确的数据分为三部分
                //第一部分:@的左边
                //     \\w+ 任意的字母数字下划线，至少出现一次就可以了
                //第二部分:@只能出现一次
                //第三部分:
                //      3.1         .的左边
                //              [a-zA-z0-9]{2,6}    任意的字母加数字，总共出现2-6次(此时不能出现下划线)
                //      3.2         \\.
                //      3.3         [a-zA-Z]{2,3}大写字母，小写字母都可以，只能出现2-3次
                //      我们可以把3.2和3.3看成一组，这一组可以出现1次或者两次
                String regex3 = "\\w+@[\\w&&[^_]]{2,6}(\\.[a-zA-Z]{2,3}){1,2}";
                System.out.println("3232323@qq.com".matches(regex3));
                System.out.println("zhangsan@itcast.cnn".matches(regex3));
                System.out.println("dlei0009@163.com".matches(regex3));
                System.out.println("dlei0009@pci.com.cn".matches(regex3));


                //24小时的正则表达式
                String regex4 = "([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d";
                System.out.println("23:11:11".matches(regex4));

                String regex5 = "([01]\\d 2[0-3])(:[0-5]\\d){2}";
                System.out.println("23:11:11".matches(regex5));
            }
        }
******************************************************************************************************************
身份证正则表达式校验
package a06Regex;

public class RegexDemo4 {
    public static void main(String[] args) {
        String regex = "\\w{4,16}";
        System.out.println("1234".matches(regex));
        String regex1 ="[1-9]\\d{16}(\\d|x|X)";
        System.out.println("13098220021114431X".matches(regex1));
        //身份证验证
        String regex2 = "[1-9]\\d{5}([12][890])\\d{2}(0[1-9]|1[0-2])(0[1-9]|[1-2]\\d|3[01])\\d{3}[\\dXx]";
String regex3 = "[1-9]\\d{5}(18|19|20)\\d{2}(0[1-9]|10|11|12)(0[1-9]|[1-2]\\d|30|31)\\d{3}[\\dXx]";
        System.out.println("130982170211294311".matches(regex2));
        System.out.println("130982200211144311".matches(regex3));

    }
}
******************************************************************************************************************
爬虫
package a06Regex;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class RegexDemo5 {
    public static void main(String[] args) {

            /* 有如下文本，请按照要求爬取数据。
                Java自从95年问世以来，经历了很多版本，目前企业中用的最多的是Java8和Java11，
                因为这两个是长期支持版本，下一个长期支持版本是Java17，相信在未来不久Java17也会逐渐登上历史舞台
                要求:找出里面所有的JavaXX
         */
                    String str = "Java自从95年问世以来，经历了很多版本，目前企业中用的最多的是Java8和Java11，" +
                            "因为这两个是长期支持版本，下一个长期支持版本是Java17，相信在未来不久Java17也会逐渐登上历史舞台";
                    //1.获取正则表达式的对象
                    Pattern p = Pattern.compile("Java\\d{0,2}");
                    //2.获取文本匹配器的对象
                    //拿着m去读取str，找符合p规则的子串
                    Matcher m = p.matcher(str);
                    //3.利用循环获取
                    while (m.find()) {
                        String s = m.group();
                        System.out.println(s);
                    }


                }

                private static void method1(String str) {
                    //Pattern:表示正则表达式
                    //Matcher: 文本匹配器，作用按照正则表达式的规则去读取字符串，从头开始读取。
                    //          在大串中去找符合匹配规则的子串。

                    //获取正则表达式的对象
                    Pattern p = Pattern.compile("Java\\d{0,2}");
                    //获取文本匹配器的对象
                    //m:文本匹配器的对象
                    //str:大串
                    //p:规则
                    //m要在str中找符合p规则的小串
                    Matcher m = p.matcher(str);

                    //拿着文本匹配器从头开始读取，寻找是否有满足规则的子串
                    //如果没有，方法返回false
                    //如果有，返回true。在底层记录子串的起始索引和结束索引+1
                    // 0,4
                    boolean b = m.find();

                    //方法底层会根据find方法记录的索引进行字符串的截取
                    // substring(起始索引，结束索引);包头不包尾
                    // (0,4)但是不包含4索引
                    // 会把截取的小串进行返回。
                    String s1 = m.group();
                    System.out.println(s1);


                    //第二次在调用find的时候，会继续读取后面的内容
                    //读取到第二个满足要求的子串，方法会继续返回true
                    //并把第二个子串的起始索引和结束索引+1，进行记录
                    b = m.find();

                    //第二次调用group方法的时候，会根据find方法记录的索引再次截取子串
                    String s2 = m.group();
                    System.out.println(s2);
                }
            }

****************************************************************************************************
爬取
package a06Regex;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class RegexDemo6 {
    public static void main(String[] args) {
    /*
            需求:把下面文本中的座机电话，邮箱，手机号，热线都爬取出来。
            来黑马程序员学习Java，
            手机号:18512516758，18512508907或者联系邮箱:boniu@itcast.cn，
            座机电话:01036517895，010-98951256邮箱:bozai@itcast.cn，
            热线电话:400-618-9090 ，400-618-4000，4006184000，4006189090

            手机号的正则表达式:1[3-9]\d{9}
            邮箱的正则表达式:\w+@[\w&&[^_]]{2,6}(\.[a-zA-Z]{2,3}){1,2}座机电话的正则表达式:θ\d{2,3}-?[1-9]\d{4,9}
            热线电话的正则表达式:400-?[1-9]\\d{2}-?[1-9]\\d{3}

        */
        //正则表达式
        String str = "来黑马程序员学习Java，\n" +
                "            手机号:18512516758，18512508907或者联系邮箱:boniu@itcast.cn，\n" +
                "            座机电话:01036517895，010-98951256邮箱:bozai@itcast.cn，\n" +
                "            热线电话:400-618-9090 ，400-618-4000，4006184000，4006189090";
        String regex = "(1[3-9]\\d{9})|(0\\d{2,3}-?[1-9]\\d{4,9})|" +
                "(\\w+@[a-zA-Z0-9]{2,6}(\\.[a-zA-Z]{2,3}){1,2})|" +
                "(400-?[1-9]\\d{2}-?[1-9]\\d{3})";
        //获取正则表达式对象
        Pattern p = Pattern.compile(regex);
        //获取文本适配器对象

        Matcher m = p.matcher(str);
        //循环找小串
        while(m.find()){
            System.out.println(m.group());
        }


    }}

********************************************************************************************************
非贪婪爬取,非捕获爬取
package a06Regex;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class RegexDemo7 {
    public static void main(String[] args) {
             /*
            有如下文本，按要求爬取数据。
                java自从95年问世以来，经历了很多版本，目前企业中用的最多的是JAVa8和Java11，
                因为这两个是长期支持版本，下一个长期支持版本是JAVA17，相信在未来不久Java17也会逐渐登上历史舞台
            需求1:爬取版本号为8，11.17的Java文本，但是只要Java，不显示版本号。
            需求2:爬取版本号为8，11，17的Java文本。正确爬取结果为:Java8 Java11 Java17 Java17
            需求3:爬取除了版本号为8，11.17的Java文本，
        */
        String s =" java自从95年问世以来，bcccccccbc,经历了很多版本，目前企业中用的最多的是JAVa8和Java11，\n" +
                "                因为这两个是长期支持版本，下一个长期支持版本是JAVA17，" +
                "相信在未来不久Java17也会逐渐登上历史舞台";
        String regex1 = "((?i)java)(?=8|11|17)";//?i不区分大小写 ?=查找后面的数据,但只截取前面的java
        String regex2 = "((?i)java)(?:8|11|17)";//?:查找后面的数据,全截取
        String regex3 = "((?i)java)(?!8|11|17)";//?! 查找后面的数据,但只截取其他
        //非贪婪爬取,尽可能少获取数据
        String regex4 = "bc+?";//ab

        Pattern p = Pattern.compile(regex4);
        Matcher m = p.matcher(s);
        while (m.find()){
            System.out.println(m.group());
        }


    }
}
****************************************************************************************************************
替换和截取

package a06Regex;

public class RegexDemo8 {
    public static void main(String[] args) {

                //public string replaceAll(string regex,string newstr) 按照正则表达式的规则进行替换
                //public string[] split(string regex): 按照正则表达式的规则切割字符串

        /*
            有一段字符串:小诗诗dqwefqwfqwfwq12312小丹丹dqwefqwfqwfwq12312小惠惠
            要求1:把字符串中三个姓名之间的字母替换为vs
            要求2:把字符串中的三个姓名切割出来*/

                String s = "小诗诗123小丹丹123小惠惠";
                //细节:
                //方法在底层跟之前一样也会创建文本解析器的对象
                //然后从头开始去读取字符串中的内容，只要有满足的，那么就用第一个参数去替换。
        String str = s.replaceAll("[\\w&&[^_]]+", "vs");
        String[] arr = s.split("[\\w&&[^_]]+");
        for (int i = 0; i < arr.length; i++) {
            System.out.println(arr[i]);
        }
        System.out.println(str);

    }
        }

****************************************************************************************************
捕获分组 内部\\1
package a06Regex;

public class RegexDemo9 {

        public static void main(String[] args) {
            //需求1:判断一个字符串的开始字符和结束字符是否一致?只考虑一个字符
            //举例: a123a b456b 17891 &abc& a123b(false)
            // \\组号:表示把第X组的内容再出来用一次
            String regex = "(.).+\\1";
            System.out.println("a123a".matches(regex));
            System.out.println("b456b".matches(regex));
            System.out.println("17891".matches(regex));
            System.out.println("&abc&".matches(regex));
            System.out.println("a123b".matches(regex));


            System.out.println("***********************************");
            //需求2:判断一个字符串的开始部分和结束部分是否一致?可以有多个字符
            //举例: abc 123 abc b456b 123789123 &!@abc&!@ abc123abd(false)
String regex2= "(.+).+\\1";
            System.out.println("abc123abc".matches(regex2));
            System.out.println("b456b".matches(regex2));
            System.out.println("123789123".matches(regex2));
            System.out.println("&!@abc&!@".matches(regex2));
            System.out.println("abc123abd".matches(regex2));


            System.out.println("***********************************");
            //需求3:判断一个字符串的开始部分和结束部分是否一致?开始部分内部每个字符也需要一致
            //举例: aaa123aaa bbb456bbb 111789111 &&abc&&
            //(.):把首字母看做一组
            // \\2:把首字母拿出来再次使用
            // *:作用于\\2,表示后面重复的内容出现0次或多次

            String regex3 = "((.)\\2*).+\\1";
            System.out.println("aaa123aaa".matches(regex3));
            System.out.println("bbb456bbb".matches(regex3));
            System.out.println("111789111".matches(regex3));
            System.out.println("&&abc&&".matches(regex3));

        }
    }


********************************************************************************************
捕获分组 外部 $!
package a06Regex;

public class RegexDemo10 {
    public static void main(String[] args) {

        /*需求:
            将字符串:我要学学编编编编程程程程程程替换为:我要学编程
        */
                String str = "我要学学编编编编程程程程程程";

                //需求:把重复的内容 替换为 单个的
                //学学                学
                //编编编编            编
                //程程程程程程        程
//(.)首个任意字符
        // \\1 重复第一组内容
        // + 重复1次或者多次
       String regex ="(.)\\1+";
        System.out.println(str.replaceAll(regex, "$1"));


    }
        }




