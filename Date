package a07jdk7Date;

import java.util.Date;

public class DateDemo1 {
    public static void main(String[] args) {
                      /*
            public Date() 创建Date对象，表示当前时间
            public Date(long date) 创建Date对象，表示指定时间
            public void settime(long time) 设置/修改毫秒值
            public long gettime() 获取时间对象的毫秒值
        */
        //1.创建对象表示一个时间
        Date d1 = new Date();
        //system.out.println(d1);

        //2.创建对象表示一个指定的时间
        Date d2 = new Date(1000L);
        System.out.println(d2);

        //3.settime 修改时间
        //1000毫秒=1秒
        d2.setTime(2000L);
        System.out.println(d2);

        //4.getTime获取当前时间的毫秒值
        long time = d2.getTime();
        System.out.println(time);
    }
}
********************************************************************************************************************************
package a07jdk7Date;

import java.util.Date;
import java.util.Random;

public class DateDemo2 {
    public static void main(String[] args) {
         /*
        需求1:打印时间原点开始一年之后的时间
        需求2:定义任意两个Date对象，比较一下哪个时间在前，哪个时间在后
        */

//        long time = 1000l*60*60*24*365;
//        Date d = new Date(time);
//        System.out.println(d);

        Random r = new Random();
        Date d1 = new Date( Math.abs(r.nextInt()));//绝对值,保证是正数
        Date d2 = new Date( Math.abs(r.nextInt()));
        System.out.println(d1);
        System.out.println(d2);
        long time1 = d1.getTime();
        long time2 = d2.getTime();
        if(time1 > time2){
            System.out.println("第一个时间大");
        }else if(time1 < time2){
            System.out.println("第二个时间大");
        }else{
            System.out.println("时间一致");
        }
    }
}
********************************************************************************************************************************
package a07jdk7Date;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class SimpleDateFormatDemo1 {
    public static void main(String[] args) throws ParseException {
                /*
            public simpleDateFormat() 默认格式
            public simpleDateFormat(String pattern) 指定格式
            public final string format(Date date) 格式化(日期对象 ->字符串)
            public Date parse(string source) 解析(字符串 ->日期对象)
        */


        //1.定义一个字符串表示时间
        String str = "2023-11-11 11:11:11";
        //2.利用带参构造创建simpleDateFormat对象
        // 细节:
        //创建对象的格式要跟字符串的格式完全一致
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date date = sdf.parse(str);
        //3.打印结果
        System.out.println(date.getTime());//1699672271000


    }

    private static void method1() {
        //1.利用空参构造创建simpleDateFormat对象，默认格式
        SimpleDateFormat sdf1 = new SimpleDateFormat();
        //时间原点
        Date d1 = new Date(0L);
        String str1 = sdf1.format(d1);
        System.out.println(str1);//1970/1/1 上午8:00

        //2.利用带参构造创建simpleDateFormat对象，指定格式
        SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy年MM月dd日HH:mm:ss");
        String str2 = sdf2.format(d1);
        System.out.println(str2);//1970年01月01日 08:00:00
        //课堂练习:yyyy年MM月dd日 时:分:秒 星期

    }
}

********************************************************************************************************************************
package a07jdk7Date;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class SimpleDateFormatDemo2 {
    public static void main(String[] args) throws ParseException {
        String str = "2000-11-11";
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        //先解析字符串成为Date
        Date parse = sdf.parse(str);
        SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy年MM月dd日");
        //再格式化
        String format = sdf2.format(parse);
        System.out.println(format);
    }
}
********************************************************************************************************************************
package a07jdk7Date;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.SimpleFormatter;

public class SimpleDateFormatDemo3 {
    public static void main(String[] args) throws ParseException {
                      /* 需求:
            秒杀活动开始时间:2023年11月11日 0:0:0(毫秒值)
            秒杀活动结束时间:2023年11月11日 0:10:0(毫秒值)

            小贾下单并付款的时间为:2023年11月11日 0:01:0
            小皮下单并付款的时间为:2023年11月11日 0:11:0
            用代码说明这两位同学有没有参加上秒杀活动?
         */
        String s1 = "2023年11月11日 0:0:0";
        String s2 = "2023年11月11日 0:10:0";
        String s3 = "2023年11月11日 0:01:0";
        String s4 = "2023年11月11日 0:11:0";
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日 HH:mm:ss");
        long time1 = sdf.parse(s1).getTime();
        long time2 = sdf.parse(s2).getTime();
        long time3 = sdf.parse(s3).getTime();
        long time4 = sdf.parse(s4).getTime();
        long time = time2-time1;
        long timeJ = time3-time1;
        long timeP = time4 - time1;
        if(time >= timeJ){
            System.out.println("小贾抢到了");
        }else {
            System.out.println("小贾没抢到");
        }
        if(time >= timeP){
            System.out.println("小皮抢到了");
        }else {
            System.out.println("小皮没抢到");
        }
        System.out.println(time);


    }
}
********************************************************************************************************************************
package a08jdk8Date;

import java.time.ZoneId;
import java.util.Set;

public class a01_ZoneIdDemo1 {
    public static void main(String[] args) {
                /*
        static Set<string> getAvailableZoneIds() 获取Java中支持的所有时区
        static ZoneId systemDefault() 获取系统默认时区
        static ZoneId of(string zoneld) 获取一个指定时区
        */
        Set<String> s = ZoneId.getAvailableZoneIds();
        System.out.println(s.size());
        System.out.println(s);

        System.out.println( ZoneId.systemDefault());

        System.out.println( ZoneId.of("Asia/Shanghai"));

    }
}
********************************************************************************************************************************
package a08jdk8Date;

import java.time.Instant;
import java.time.ZoneId;
import java.time.ZonedDateTime;

public class a02_InstantDemo {
    public static void main(String[] args) {
        /*
            static Instant now() 获取当前时间的Instant对象(标准时间)
            static Instant ofXxxx(long epochMilli) 根据(秒/毫秒/纳秒)获取Instant对象
            ZonedDateTime atZone(ZoneIdzone) 指定时区
            boolean isxxx(Instant otherInstant) 判断系列的方法
            Instant minusXxx(long millisToSubtract) 减少时间系列的方法
            Instant plusXxx(long millisToSubtract) 增加时间系列的方法
        */
        //static 静态方法,直接调用 类名.
        //非静态方法 需要对象调用
        //1.获取当前时间的Instant对象(标准时间)
        Instant now = Instant.now();
        System.out.println(now);

        //2.根据(秒/毫秒/纳秒)获取Instant对象
        Instant instant1 = Instant.ofEpochMilli(0L);
        System.out.println(instant1);//1970-01-01T00:00:00z

        Instant instant2 = Instant.ofEpochSecond(1L);
        System.out.println(instant2);//1970-01-01T00:00:01Z

        Instant instant3 = Instant.ofEpochSecond(1L, 1000000000L);
        System.out.println(instant3);//1970-01-01T00:00:027

        //3. 指定时区
        ZonedDateTime time = Instant.now().atZone(ZoneId.of("Asia/Shanghai"));
        System.out.println(time);

        //4.用于时间的判断
        //isBefore:判断调用者代表的时间是否在参数表示时间的前面
        Instant instant4=Instant.ofEpochMilli(0L);
        Instant instant5 =Instant.ofEpochMilli(1000L);
        boolean result1=instant4.isBefore(instant5);
        System.out.println(result1);//true

        //isAfter:判断调用者代表的时间是否在参数表示时间的后面
        boolean result2 = instant4.isAfter(instant5);
        System.out.println(result2);//false

        //5.Instant minusXxx(long millisToSubtract) 减少时间系列的方法
        Instant instant6 =Instant.ofEpochMilli(3000L);
        System.out.println(instant6);//1970-01-01T00:00:03Z

        Instant instant7 =instant6.minusSeconds(1);
        System.out.println(instant7);//1970-01-01T00:00:02Z

        System.out.println(instant6.plusSeconds(1));


    }

}

********************************************************************************************************************************
package a08jdk8Date;

import java.time.Instant;
import java.time.ZoneId;
import java.time.ZonedDateTime;

public class a03_ZoneDateTimeDemo {
    public static void main(String[] args) {
            /*
            static ZonedDateTime now() 获取当前时间的ZonedDateTime对象
            static ZonedDateTime ofXxxx(。。。) 获取指定时间的ZonedDateTime对象
            ZonedDateTime withXxx(时间) 修改时间系列的方法
            ZonedDateTime minusXxx(时间) 减少时间系列的方法
            ZonedDateTime plusXxx(时间) 增加时间系列的方法
         */
        //1.获取当前时间对象(带时区)
        ZonedDateTime now = ZonedDateTime.now();
        System.out.println(now);

        //2.获取指定的时间对象(带时区)1/年月日时分秒纳秒方式指定
        ZonedDateTime time1 = ZonedDateTime.of(2023, 10, 1,
                11, 12, 12, 0, ZoneId.of("Asia/Shanghai"));
        System.out.println(time1);

        //通过Instant + 时区的方式指定获取时间对象
        Instant instant = Instant.ofEpochMilli(0L);
        ZoneId zoneId = ZoneId.of("Asia/Shanghai");
        ZonedDateTime time2 = ZonedDateTime.ofInstant(instant, zoneId);
        System.out.println(time2);

        //3.withXxx 修改时间系列的方法
        ZonedDateTime time3 = time2.withYear(2000);
        System.out.println(time3);

        //4. 减少时间
        ZonedDateTime time4 = time3.minusYears(1);
        System.out.println(time4);

        //5.增加时间
        ZonedDateTime time5 = time4.plusYears(1);
        System.out.println(time5);

    }
}
********************************************************************************************************************************
package a08jdk8Date;

import java.time.Instant;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

public class a04_DateTimeForMatterDemo {
    public static void main(String[] args) {
           /*
            static DateTimeFormatter ofPattern(格式) 获取格式对象
            String format(时间对象) 按照指定方式格式化
        */

//        Instant now = Instant.now();
//        ZoneId zoneId = ZoneId.of("Asia/Shanghai");
//        ZonedDateTime zonedDateTime = ZonedDateTime.ofInstant(now, zoneId);
        ZonedDateTime now = ZonedDateTime.now();
        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss EE a");
        System.out.println(dateTimeFormatter.format(now));

        //获取时间对象
        ZonedDateTime time = Instant.now().atZone(ZoneId.of("Asia/Shanghai"));

        // 解析/格式化器
        DateTimeFormatter dtf1=DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss EE a");
        // 格式化
        System.out.println(dtf1.format(time));


    }
}
********************************************************************************************************************************
package a08jdk8Date;

import java.time.LocalDate;
import java.time.Month;
import java.time.MonthDay;

public class a05_LocalDateDemo {
    public static void main(String[] args) {
        //1.获取当前时间的日历对象(包含 年月日)

        LocalDate now = LocalDate.now();
        System.out.println(now);
        //2.获取指定的时间的日历对象
        LocalDate of = LocalDate.of(2030, 1, 1);
        System.out.println(of);

        System.out.println("=============================");

        //3.get系列方法获取日历中的每一个属性值//获取年
        System.out.println(now.getYear());
        //获取月
        System.out.println(now.getMonthValue());
        System.out.println(now.getDayOfMonth());
        //获取一年的第几天
        System.out.println(now.getDayOfYear());
        //获取星期
        System.out.println(now.getDayOfWeek().getValue());
        //is开头的方法表示判断
        System.out.println(now.isBefore(of));
        //with开头的方法表示修改，只能修改年月日
        System.out.println(of.withYear(2021));

        //minus开头的方法表示减少，只能减少年月日
        System.out.println(of.minusYears(1));
        //plus开头的方法表示增加，只能增加年月日
        System.out.println(of.plusDays(1));

        // 判断今天是否是你的生日
        LocalDate birDay = LocalDate.of(2002, 11, 14);
        MonthDay birMd = MonthDay.of(birDay.getMonthValue(), birDay.getDayOfMonth());
        MonthDay nowMd = MonthDay.from(now);

        System.out.println("今天是你的生日吗? " + birMd.equals(nowMd));//今天是你的生日吗?


    }
}

********************************************************************************************************************************
package a08jdk8Date;

import java.time.LocalTime;

public class a06_LocalTimeDemo {
    public static void main(String[] args) {
        // 获取本地时间的日历对象。(包含 时分秒)
        LocalTime now = LocalTime.now();
        System.out.println(now);
        int hour = now.getHour();//时
        System.out.println("hour: " + hour);
        int minute = now.getMinute();//分
        System.out.println("minute: " + minute);
        int second = now.getSecond();//秒
        System.out.println("second:" + second);
        int nano = now.getNano();//纳秒
        System.out.println("nano:" + nano);
        System.out.println("****************************");
        System.out.println(LocalTime.of(8, 8, 8));
        System.out.println(LocalTime.of(8, 20, 30, 150));//时分秒纳秒
        LocalTime mTime = LocalTime.of(8, 20, 30, 150);
        //is系列的方法
        System.out.println(mTime.isBefore(now));
        System.out.println(mTime.isAfter(now));
        //with系列的方法，只能修改时、分、秒
        System.out.println(mTime.withHour(7));
        //minus,plus系列的方法，只能修改时、分、秒
        System.out.println(mTime.minusHours(1));
        System.out.println(mTime.plusHours(2));

    }
}
********************************************************************************************************************************
package a08jdk8Date;

import java.time.LocalDateTime;

public class a07_LocalDateTimeDemo {
    public static void main(String[] args) {
        // 当前时间的的日历对象(包含年月日时分秒)
        LocalDateTime now = LocalDateTime.now();
        System.out.println(now);
        System.out.println(now.getYear());
        System.out.println(now.getMonthValue());
        System.out.println(now.getDayOfMonth());
        System.out.println(now.getHour());
        System.out.println(now.getMinute());
        System.out.println(now.getSecond());
        System.out.println(now.getNano());
        // 日:当年的第几天
        System.out.println(now.getDayOfYear());
        //星期
        System.out.println(now.getDayOfWeek());
        //转成年月日
        System.out.println(now.toLocalDate());
        //转成时间
        System.out.println(now.toLocalTime());
        System.out.println(now.toLocalTime().getHour());
        System.out.println(now.toLocalTime().getMinute());
        System.out.println(now.toLocalTime().getSecond());

    }
}

********************************************************************************************************************************
package a08jdk8Date;

import java.time.LocalDate;
import java.time.Period;

public class a08_PeriodDemo {
    public static void main(String[] args) {
        // 当前本地 年月日
        LocalDate now = LocalDate.now();
        System.out.println(now);
        //生日年月日
        LocalDate birDay = LocalDate.of(2002, 11, 14);
        Period between = Period.between(birDay, now);
        System.out.println("相差时间:"+between);
        System.out.println(between.getYears());
        System.out.println(between.getMonths());
        System.out.println(between.getDays());

        System.out.println("我还是个"+between.toTotalMonths()+"月大的宝宝");



    }
}

********************************************************************************************************************************
package a08jdk8Date;

import jdk.swing.interop.SwingInterOpUtils;

import java.time.Duration;
import java.time.LocalDateTime;

public class a09_DurationDemo {
    public static void main(String[] args) {
        // 本地日期时间对象。
        LocalDateTime now = LocalDateTime.now();
        System.out.println(now);
        //出生的日期时间对象
        LocalDateTime of = LocalDateTime.of(2002, 11, 14, 0, 0);
        System.out.println(of);
        Duration between = Duration.between(of, now);
        System.out.println(between);
        System.out.println(between.toDays());
        System.out.println(between.toHours());//两个时间差的小时数
        System.out.println(between.toMinutes());//两个时间差的分钟数
        System.out.println(between.toMillis());//两个时间差的毫秒数
        System.out.println(between.toNanos());//两个时间差的纳秒数

    }
}


********************************************************************************************************************************
package a08jdk8Date;

import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;

public class a10_ChronoUnitDemo {
    public static void main(String[] args) {
        // 当前时间
        LocalDateTime today = LocalDateTime.now();
        System.out.println(today);
        // 生日时间
        LocalDateTime birthDate = LocalDateTime.of(2002, 11, 14,
                0, 0, 0);
        System.out.println(birthDate);

        System.out.println("相差的年数:" + ChronoUnit.YEARS.between(birthDate, today));
        System.out.println("相差的月数:" + ChronoUnit.MONTHS.between(birthDate, today));
        System.out.println("相差的周数:" + ChronoUnit.WEEKS.between(birthDate, today));
        System.out.println("相差的天数:" + ChronoUnit.DAYS.between(birthDate, today));
        System.out.println("相差的时数:" + ChronoUnit.HOURS.between(birthDate, today));
        System.out.println("相差的分数:" + ChronoUnit.MINUTES.between(birthDate, today));
        System.out.println("相差的秒数:" + ChronoUnit.SECONDS.between(birthDate, today));
        System.out.println("相差的毫秒数:" + ChronoUnit.MILLIS.between(birthDate, today));
        System.out.println("相差的微秒数:" + ChronoUnit.MICROS.between(birthDate, today));
        System.out.println("相差的纳秒数:" + ChronoUnit.NANOS.between(birthDate, today));
        System.out.println("相差的半天数:" + ChronoUnit.HALF_DAYS.between(birthDate, today));
        System.out.println("相差的十年数:" + ChronoUnit.DECADES.between(birthDate, today));
        System.out.println("相差的世纪(百年)数:" + ChronoUnit.CENTURIES.between(birthDate, today));
        System.out.println("相差的千年数:" + ChronoUnit.MILLENNIA.between(birthDate, today));
        System.out.println("相差的纪元数:" + ChronoUnit.ERAS.between(birthDate, today));

    }
}


