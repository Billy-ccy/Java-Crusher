继承中 成员变量
1.访问特点:就近原则 谁离我进,我就用谁
2.局部-子类-父类 逐级往上找
 重名的成员变量
sout(name)  局部变量
sout(this.name)  本类变量
sout(super.class) 父类变量
---------------------------------------------------------------------
继承中 成员方法
1.访问特点:this调用 就近原则  super调用 直接找父类
2.方法的重写:当父类的方法不能满足于子类现在的需求,需要重写
@Override重写注解 
重写的本质:如果发生了重写,则会被覆盖
注意事项:只有被添加到虚方法表中的方法才能被重写
重写的方法尽量和父类保持一致
---------------------------------------------------------------------
继承中 构造方法
1.访问特点:子类不能继承父类的构造方法,但是可以通过super调用
2.子类的构造方法第一行有默认的super();
3.默认先访问父类中无参的构造方法,在执行自己的
4.访问父类的有参构造,必须手动super(name,age);

this()表示调用本类的其他构造方法,在构造方法第一行,给数据默认值

**********************************************************************************************************************************************************************************
package a02bianliang;

public class test {
    //就近原则
    public static void main(String[] args) {
        Zi zi = new Zi();
        zi.Fa();

    }

}
public class Zi extends Fu{
    String name ="小崔";
    String activity ="跳街舞";

    public void Fa(){
        String name = "小小崔";
        System.out.println(name);//局部变量
        System.out.println(this.name);//本类变量
        System.out.println(super.name);//父类变量
        
        System.out.println(hobby);
    }
}

public class Fu {
    String name = "大崔";
    String hobby = "喝茶";
}
---------------------------------------------------------------------
package a03method;

public class test {
    public static void main(String[] args) {
        Hsq hsq = new Hsq();
        hsq.eat();
        hsq.drink();
        hsq.lookHome();
        hsq.lunch();
        Sp s = new Sp();
        s.eat();
        s.drink();
        s.lookHome();
    }
}
public class dog {
    public void eat(){
        System.out.println("吃狗粮");
    }
    public void drink(){
        System.out.println("喝水");
    }
    public void lookHome(){
        System.out.println("看家");
    }


}
public class Hsq extends dog{
    public void breakHome(){
        System.out.println("拆家");
    }

    public void lunch(){
        this.eat();//本类调用
        super.eat();//父类调用
    }
    @Override//重写注解
    public void eat(){
        System.out.println("吃优质狗粮");
    }
}
public class Jm extends dog{
    @Override//重写注解
    public void eat(){
        System.out.println("吃剩饭");
    }
}

public class Sp extends dog{
    @Override//重写注解
    public void eat(){
        super.eat();//父类调用 吃狗粮
        System.out.println("吃骨头");
    }
}
---------------------------------------------------------------------
package a04gouzao;

public class test {
    public static void main(String[] args) {
        Student s = new Student("张三",18);
        System.out.println(s.name +", "+ s.age);
    }
}

public class Student extends Person{
    public Student(){
        super();//先调用父类的空参构造
        System.out.println("本类的空参构造");//再执行
    }

    public Student(String name,int age){
        super(name,age);//调用父类有参构造
    }
}
public class Person {
    String name;
    int age;

    public Person(){
        System.out.println("调用父类空参构造");
    }
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }
}




