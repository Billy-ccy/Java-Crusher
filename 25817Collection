package a01mycollection;

import java.util.ArrayList;
import java.util.Collection;

public class a01_collection {
    public static void main(String[] args) {

        //多态
        //方法.编译看左边,运行看右边
        //创建对象,collection是接口,通过实现类创建对象
        Collection<String> coll = new ArrayList<>();
        //添加元素
        coll.add("aaa");
        coll.add("bbb");
        coll.add("ccc");
        System.out.println(coll);
        //删除元素
        coll.remove("aaa");
        System.out.println(coll);
        //判断集合是否包含元素,底层是依赖equals方法
        System.out.println(coll.contains("bbb"));
        //判断集合是否为空
        System.out.println(coll.isEmpty());
        //集合长度
        System.out.println(coll.size());
        //清除集合
        coll.clear();
        System.out.println(coll);

    }
}
-------------------------------------------------------------------------------------------------------------------------------------------
package a01mycollection;

import java.util.ArrayList;
import java.util.Collection;

public class a02_collectionDemo {
    public static void main(String[] args) {
        Collection<Student> coll = new ArrayList<>();

        Student s1 = new Student("zs",18);
        Student s2 = new Student("ls",28);

        coll.add(s1);
        coll.add(s2);
        //contains底层代码 是依赖equals()方法,object比较的是地址值
        // 当我们存储自定义对象时,通过contains判断是否包含,要在javabean中,重写equals()方法
        //重写内容,是比较属性值.
        System.out.println(coll.contains(s2));
        Student s3 = new Student("ls",28);
        System.out.println(coll.contains(s3));
    }
}
------------------------------------------------------------------------------------------------------------------------------------------
package a01mycollection;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

public class a03_IteratorDemo {
    public static void main(String[] args) {
        /*
        Collection系列集合三种通用的遍历方式
        1.迭代器遍历
        2.增强for遍历
        3.lambda表达式遍历

        迭代器遍历的三个方法
        Iterator<E> iterator():获取一个迭代器对象
        boolean hasNext() :判断当前指向的位置是否有元素
        E next() :获取当前元素,并移动指针
         */
        //1.创建集合并添加元素
        Collection<String> coll = new ArrayList<>();
        coll.add("aaa");
        coll.add("bbb");
        coll.add("ccc");
        coll.add("ddd");

        //2.获取迭代器对象
        //迭代器就好比是一个箭头，默认指向集合的0索引处
        Iterator<String> it = coll.iterator();
        //3.利用循环不断的去获取集合中的每一个元素
        while (it.hasNext()){
            //4.next方法的两件事情：获取元素并移动指针
            String next = it.next();
            System.out.println(next);
        }



    }
}
-------------------------------------------------------------------------------------------------------------------------------
package a01mycollection;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

public class a04_IteratorDemo {
    public static void main(String[] args) {
        /*
        迭代器的细节注意点
        1.报错NoSuchElementException
        2.迭代器遍历完毕,指针不会复位
        3.循环中只能用一次next()方法
        4.迭代器遍历时,不能用集合的方法进行增加或者删除
         */

        Collection<String> coll = new ArrayList<>();
        coll.add("aaa");
        coll.add("bbb");
        coll.add("ccc");
        coll.add("ddd");

        Iterator<String> iterator = coll.iterator();
        while (iterator.hasNext()){
            String str = iterator.next();
            System.out.println(str);
        }
        //当上面循环结束之后，迭代器的指针已经指向了最后没有元素的
        iterator.next();

        //迭代器遍历完毕，指针不会复位
        System.out.println(iterator.hasNext());
        System.out.println(iterator.hasNext());
        System.out.println(iterator.hasNext());

        //如果我们要继续第二次遍历集合，只能再次获取一个新的迭代器对象
        Iterator<String> it2 = coll.iterator();
        while(it2.hasNext()){
            String str = it2.next();
            System.out.println(str);
        }
    }
}
----------------------------------------------------------------------------------------------------------------
package a01mycollection;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

public class a05_IteratorDemo {
      /*
        迭代器的细节注意点

        3.循环中只能用一次next()方法
        4.迭代器遍历时,不能用集合的方法进行增加或者删除
         */
      public static void main(String[] args) {
          Collection<String> coll = new ArrayList<>();
          coll.add("aaa");
          coll.add("bbb");
          coll.add("ccc");
          coll.add("ddd");
          coll.add("eee");

          Iterator<String> iterator = coll.iterator();
          while (iterator.hasNext()){
              String str = iterator.next();
//循环中只能用一次next()方法,多次会报错
           //   System.out.println(iterator.next());
          //    System.out.println(iterator.next());
              if ("bbb".equals(str)){
                  // 4.迭代器遍历时,不能用集合的方法进行增加或者删除,
                  // 但能用迭代器的remove()方法
                  iterator.remove();
              }

          }
          System.out.println(coll);


      }
      }


--------------------------------------------------------------------------------------------------------------------------
package a01mycollection;

import java.util.ArrayList;
import java.util.Collection;

public class a06_forDemo {
    public static void main(String[] args) {
               /* Collection系列集合三种通用的遍历方式：
        1.迭代器遍历
        2.增强for遍历
        3.lambda表达式遍历

        增强for格式：
            for(数据类型 变量名: 集合/数组){

            }

        快速生成方式：
            集合的名字 + for 回车

        */
        //1.创建集合并添加元素
        Collection<String> coll = new ArrayList<>();
        coll.add("zs");
        coll.add("ls");
        coll.add("ww");
        //2.利用增强for进行遍历
        //注意点：
        //s其实就是一个第三方变量，在循环的过程中依次表示集合中的每一个数据
        for (String s : coll) {
            System.out.println(s);
        }
    }
}
------------------------------------------------------------------------------------------------
package a01mycollection;

import java.util.ArrayList;
import java.util.Collection;
import java.util.function.Consumer;

public class a07_lambdaDemo {
    public static void main(String[] args) {
               /* Collection系列集合三种通用的遍历方式：
        1.迭代器遍历
        2.增强for遍历
        3.lambda表达式遍历

        lambda表达式遍历：
                default void forEach(Consumer<? super T> action):
        */
        Collection<String> coll =new ArrayList<>();
        coll.add("12");
        coll.add("as");
        coll.forEach(new Consumer<String>() {
            @Override
            public void accept(String s) {
                System.out.println(s);
            }
        });
        //2.利用匿名内部类的形式
        //底层原理：
        //其实也会自己遍历集合，依次得到每一个元素
        //把得到的每一个元素，传递给下面的accept方法
        //s依次表示集合中的每一个数据
        coll.forEach(s -> System.out.println(s));

    }
}
------------------------------------------------------------------------------------------------------
package a01mycollection;

import java.util.Objects;

public class Student {
    private String name;
    private int age;

    public Student() {
    }

    public Student(String name, int age) {
        this.name = name;
        this.age = age;
    }

    /**
     * 获取
     * @return name
     */
    public String getName() {
        return name;
    }

    /**
     * 设置
     * @param name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * 获取
     * @return age
     */
    public int getAge() {
        return age;
    }

    /**
     * 设置
     * @param age
     */
    public void setAge(int age) {
        this.age = age;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Student student = (Student) o;
        return age == student.age && Objects.equals(name, student.name);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, age);
    }

    public String toString() {
        return "Student{name = " + name + ", age = " + age + "}";
    }
}

