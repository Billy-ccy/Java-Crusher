package a02mylist;

import java.util.ArrayList;
import java.util.List;

public class a01_ListDemo {
    public static void main(String[] args) {
           /*

        List系列集合独有的方法：
            void add(int index,E element)       在此集合中的指定位置插入指定的元素
            E remove(int index)                 删除指定索引处的元素，返回被删除的元素
            E set(int index,E element)          修改指定索引处的元素，返回被修改的元素
            E get(int index)                    返回指定索引处的元素
        */

        //多态
        //创建集合
        List<String> list = new ArrayList<>();
        //添加元素
        list.add("aaa");
        list.add("bbb");
        list.add("ccc");
        list.add(1, "ddd");
        //for循环,遍历集合
        for (int i = 0; i < list.size(); i++) {
            System.out.println(list.get(i));
        }
        System.out.println("--------------");

        //删除元素
        String remove = list.remove(1);
        //for循环,遍历集合
        for (int i = 0; i < list.size(); i++) {
            System.out.println(list.get(i));
        }
        System.out.println("--------------");
        //修改元素
        String set = list.set(1, "ppp");
        System.out.println(set);
        System.out.println("--------------");
        //获取元素
        System.out.println(list.get(1));
        System.out.println(list);
        System.out.println("--------------");
        //for循环,遍历集合
        for (int i = 0; i < list.size(); i++) {
            System.out.println(list.get(i));
        }
    }
}
-----------------------------------------------------------------------------------------------------------------------------------
package a02mylist;

import java.util.ArrayList;
import java.util.List;

public class a02_ListDemo {
    public static void main(String[] args) {
        //List系列集合中的两个删除的方法
        //1.直接删除元素
        //2.通过索引进行删除

        //1.创建集合并添加元素
        List<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);

        //2.删除元素
        //请问：此时删除的是1这个元素，还是1索引上的元素？
        //为什么？
        //因为在调用方法的时候，如果方法出现了重载现象  =>同一个方法名,形参不同
        //优先调用，实参跟形参类型一致的那个方法。
        //根据索引1,删除元素
        list.remove(1);

        //手动装箱,手动把基本数据类型的1，变成Integer类型
        Integer i = Integer.valueOf(1);
        //根据对象 1 ,删除元素
        list.remove(i);

        System.out.println(list);
    }
}
--------------------------------------------------------------------------------------------------------------------
package a02mylist;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.function.Consumer;

public class a03_ListDemo {
    public static void main(String[] args) {
                /*
            List系列集合的五种遍历方式：
                1.迭代器
                2.列表迭代器
                3.增强for
                4.Lambda表达式
                5.普通for循环
         */
        //创建集合并添加数据
        List<String> list = new ArrayList<>();
        list.add("aa");
        list.add("bb");
        list.add("cc");
        System.out.println(list);
        System.out.println("--------------------");
//1.迭代器
        Iterator<String> it = list.iterator();
        while(it.hasNext()){
            String str = it.next();
            //迭代器,删除元素
            //当集合遍历到跟"bb"一样的元素,就删除这个元素
            if("bb".equals(str)){
            it.remove();
            }

        }
        System.out.println(list);
        System.out.println("--------------------");
        //2.列表迭代器
        //获取一个列表迭代器的对象，里面的指针默认也是指向0索引的
        //额外添加了一个方法：在遍历的过程中，可以添加元素
        ListIterator<String> it2 = list.listIterator();
        while (it2.hasNext()){
            String str = it2.next();
            //添加元素
            //当集合遍历到跟"aa"一样的元素,就在这个位置后面添加"bb";
            if("aa".equals(str)){
                it2.add("bb");
            }
        }
        System.out.println(list);
        System.out.println("--------------------");
//3.增强for遍历
        //下面的变量s,其实就是一个第三方变量
        //在循环过程中,依次表示集合中的每一个元素
        for (String s : list) {
            System.out.println(s);
        }
        System.out.println("--------------------");
        //4.lambda表达式遍历
        //底层就是一个循环遍历,依次得到集合中的每一个元素
        //并把每一个元素传递给下面的accept方法
        //形参s,依次表示集合中的每一个元素
        list.forEach(s ->System.out.println(s)  );
        System.out.println("--------------------");
      //5.for循环遍历
        //size方法跟get方法还有循环结合的方式，利用索引获取到集合中的每一个元素
        for (int i = 0; i < list.size(); i++) {
            System.out.println(list.get(i));
        }

    }
}
------------------------------------------------------------------------------------------------------------------
package a02mylist;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class a04_ListDemo {
    public static void main(String[] args) {
        List<String> list = new ArrayList<>();
        list.add("ab");
        list.add("abc");
        Iterator<String> iterator = list.iterator();

        while ( iterator.hasNext()){
            String next = iterator.next();
            System.out.println(next.length());

            System.out.println(next);
        }


    }
}
